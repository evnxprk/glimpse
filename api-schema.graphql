# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"""

A Category is a type of separative attribute that can be applied to different items in the database,
namely Productions. Categories can be ordered one after another and in a tree-like structure with parent
and child Categories.
"""
type Category {
  appearsAfter: Category
  id: Int!
  name: String!
  parent: Category
}

"""

Credits are a way of attributing acknowledgement of a given Person's contributions to a Production. Productions and
People can have an unlimited number of Credits. Credits have an order property \"appearsAfter\" which is directed
by the backend, allowing for complex ordering of which Credits should appear first.
"""
type Credit {
  appearsAfter: Credit
  id: Int!
  job: String
  person: Person!
}

"Images are a type of media content which contain the metadata for a given image file on the site"
type Image {
  added: DateTime!
  id: ID!
  link: String!
  name: String!
}

type Mutation {
  "Create a Credit in a Production for a Person."
  addCredit(appearsAfter: Int, job: String, person: Int!, production: Int!): Credit
  "Link an Image to a Production."
  addImageToProduction(image: Int!, production: Int!): Boolean
  "Link a Video to a Production."
  addVideoToProduction(production: Int!, video: Int!): Boolean
  "Create a new Category."
  createCategory(appearsAfter: Int, name: String!, parent: Int): Category
  "Create a new image which is hosted at an off-site URL."
  createOffsiteImage(link: String!, name: String!): Image
  "Create a new person in the database. Returns the newly created Person."
  createPerson(classYear: Int, firstName: String, lastName: String, preferredName: String): Person
  "Create a new Production in the database."
  createProduction(category: Int, description: String, name: String!, startTime: DateTime, thumbnail: Int, visible: Boolean): Production
  "Add a role to a person in the database. Returns the newly created Role."
  createRole(appearsAfter: Int, endDate: DateTime, name: String!, owner: Int!, startDate: DateTime): Role
  """

  Create a new video in the database. Takes a loosely-defined JSON data value which contains the video's metadata.
  TODO should be improved to have different methods for different types of videos.
  """
  createVideo(data: JSON!, name: String!, videoType: Int!): Video
  """

  Delete a Category. Will update any child Categories to have the parent of this Category's parent. Will
  also update any Categories that appear after this Category to appear after the Category that this Category
  appears after.
  Returns true on success, false otherwise.
  """
  deleteCategory(id: Int!): Boolean
  """

  Delete a Credit from a Production. Will update any Credits which appear after this Credit to appear after the
  Credit that this Credit appears after.
  Returns true on success, false otherwise.
  """
  deleteCredit(id: Int!): Boolean
  """

  Delete an image from the database. Also deletes any image-links to productions using this Image.
  Returns true on success, false otherwise.
  """
  deleteImage(id: Int!): Boolean
  """

  Delete a person from the database. Will also delete all of their roles.
  Returns true on success, false otherwise.
  """
  deletePerson(id: Int!): Boolean
  """

  Delete a production from the database. Also deletes any Credits, video-links, and image-links from the database.
  Returns true on success, false otherwise.
  """
  deleteProduction(id: Int!): Boolean
  """

  Delete a role from the database.
  Returns true on success, false otherwise.
  """
  deleteRole(id: Int!): Boolean
  """

  Delete a video from the database. Also deletes any video-links to productions using this Video.
  Returns true on success, false otherwise.
  """
  deleteVideo(id: Int!): Boolean
  "Unlink an Image from a Production."
  removeImageFromProduction(image: Int!, production: Int!): Boolean
  "Unlink a Video from a Production."
  removeVideoFromProduction(production: Int!, video: Int!): Boolean
  "Update a Category."
  updateCategory(appearsAfter: Int, id: Int!, name: String, parent: Int): Category
  "Update a Credit."
  updateCredit(appearsAfter: Int, id: Int!, job: String, person: Int): Credit
  "Update an image in the database."
  updateImage(id: Int!, name: String): Image
  "Update a person in the database with new information. Returns the updated person."
  updatePerson(classYear: Int, firstName: String, id: Int!, lastName: String, preferredName: String): Person
  "Update a production in the database."
  updateProduction(category: Int, description: String, id: Int!, name: String, startTime: DateTime, thumbnail: Int, visible: Boolean): Production
  "Update an existing Role in the database with new information. Returns the new Role."
  updateRole(appearsAfter: Int, endDate: DateTime, id: Int!, name: String, owner: Int, startDate: DateTime): Role
  "Update a video in the database."
  updateVideo(data: JSON, id: Int!, name: String, videoType: Int): Video
  "Upload an image to the database."
  uploadImage(file: Upload!, name: String!): Image
}

"""

A Person is NOT a user, but just a record of the identity of someone who may or may not be in the club.
If a Person is a member of the club, they should have at least one Role in the roles array.
"""
type Person {
  classYear: Int
  firstName: String
  id: ID!
  lastName: String
  preferredName: String
  roles: [Role!]
}

"""

Productions are the main wrapper for \"content\" on the website. A Production is some event which RPI TV attended
or documented in some way. Productions can have Images or Videos associated with them, which are the literal
content of a Production.
"""
type Production {
  category: Category
  createTime: DateTime!
  createdBy: User
  credits: [Credit]
  description: String
  id: ID!
  images: [Image!]
  name: String!
  startTime: DateTime!
  thumbnail: Image
  videos: [Video!]
  visible: Boolean!
}

type Query {
  "Get a list of all Category objects in a paginated or non-paginated manner."
  categories(pageSize: Int, prevCategoryIndex: Int): [Category!]!
  "The total number of Categories in the database."
  categoryCount: Int!
  "Get some Category object based on that object's ID. Returns null if the Category does not exist in the database."
  getCategory(id: Int!): Category
  "Get some Credit object based on that object's ID. Returns null if the Credit does not exist in the database."
  getCredit(id: Int!): Credit
  "Get some Image object based on that object's ID. Returns null if the Image does not exist in the database."
  getImage(id: Int!): Image
  "Get some Person object based on that object's ID. Returns null if the Person does not exist in the database."
  getPerson(id: Int!): Person
  """

  Get some Production object based on that object's ID. Returns null if the Production does not exist in
  the database.
  """
  getProduction(id: Int!): Production
  "Get some Role object based on that object's ID. Returns null if the Role does not exist in the database."
  getRole(id: Int!): Role
  "Get some User object based on that object's ID. Returns null if the User does not exist in the database."
  getUser(id: Int!): User
  "Get some Video object based on that object's ID. Returns null if the Video does not exist in the database."
  getVideo(id: Int!): Video
  "The total number of Images in the database."
  imageCount: Int!
  "Get a list of all Image objects in the database in a paginated or non-paginated manner."
  images(pageSize: Int, prevImageIndex: Int): [Image!]!
  "The total number of Persons in the database which have an active Role at the given moment."
  memberCount: Int!
  "Get a list of all Person objects which have an active role in a paginated or non-paginated manner."
  members(pageSize: Int, prevPersonIndex: Int): [Person!]!
  "Get a list of all Person objects regardless of member status in a paginated or non-paginated manner."
  people(pageSize: Int, prevPersonIndex: Int): [Person!]!
  "The total number of Persons in the database."
  peopleCount: Int!
  "The total number of Productions in the database."
  productionCount: Int!
  "Get a list of all Production objects in a paginated or non-paginated manner."
  productions(pageSize: Int, prevProductionIndex: Int): [Production!]!
  "The total number of Users in the database."
  userCount: Int!
  "Get a list of all User objects in a paginated or non-paginated manner."
  users(pageSize: Int, prevUserIndex: Int): [User!]!
  "The total number of Videos in the database."
  videoCount: Int!
  "Get a list of all Video objects in the database in a paginated or non-paginated manner."
  videos(pageSize: Int, prevVideoIndex: Int): [Video!]!
}

"""

Roles are assigned to People to show their membership status. Not all people are required to have a role,
or they can have an unlimited number of roles. However, they should probably only have one at any given moment.
Roles can be ordered one after another directed by the backend.
"""
type Role {
  appearsAfter: Role
  endDate: DateTime
  id: Int!
  name: String!
  startDate: DateTime
}

"""

A User is someone who can log into the website. Users do not have to have a name or have to be a member of the club,
however they can be by having an associated identity.
"""
type User {
  email: String
  id: ID!
  identity: Person
  joined: DateTime
  permissionLevel: Int
}

"""

Videos are a type of media content which contain the metadata for a given video file on the site.
Different types of videos can have different attributes, so a loosely-defined schema exists in this type's
\"data\" field.
"""
type Video {
  data: JSON!
  id: ID!
  name: String!
  videoType: Int!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}


"Use JavaScript Date object for date/time fields."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload
