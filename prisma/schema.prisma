generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessLog {
  userId    Int      @map("user")
  service   String   @db.VarChar(100)
  timestamp DateTime @default(now()) @db.Timestamp(6)
  ip        String?  @db.VarChar(60)
  id        Int      @id(map: "access_logs_pk") @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], map: "access_logs_users_id_fk")

  @@index([userId, service], map: "access_logs_for_service_index")
  @@index([ip], map: "access_logs_ip_index")
  @@index([service], map: "access_logs_service_index")
  @@map("access_logs")
}

model AlertLog {
  id        Int      @id(map: "alert_logs_pk") @default(autoincrement())
  message   String   @db.VarChar(300)
  severity  String   @db.VarChar(8)
  timestamp DateTime @default(now()) @db.Timestamp(6)

  @@index([severity, timestamp], map: "alert_logs_severity_timestamp_index")
  @@map("alert_logs")
}

model Asset {
  id                 Int       @id(map: "assets_pk") @default(autoincrement())
  tag                Int?
  name               String    @db.VarChar(150)
  lastKnownLocation  String?   @map("last_known_location") @db.VarChar(100)
  lastKnownHandlerId Int?      @map("last_known_handler")
  isLost             Boolean   @default(false) @map("is_lost")
  notes              String?   @db.VarChar(500)
  purchasePrice      Int?      @map("purchase_price")
  purchaseLocation   String?   @map("purchase_location") @db.VarChar(1000)
  purchaseDate       DateTime? @map("purchase_date") @db.Date
  modelNumber        String?   @map("model_number") @db.VarChar(100)
  serialNumber       String?   @map("serial_number") @db.VarChar(100)
  parentId           Int?      @map("parent")
  lastKnownHandler   User?     @relation("assetsTousers", fields: [lastKnownHandlerId], references: [id], onDelete: Restrict, map: "assets_users_id_fk")
  parent             Asset?    @relation("assetsToassets_parent", fields: [parentId], references: [id], onDelete: Restrict, map: "assets_assets_id_fk")
  children           Asset[]   @relation("assetsToassets_parent")

  @@index([isLost, tag], map: "assets_is_lost_tag_index")
  @@index([lastKnownHandlerId, tag], map: "assets_last_known_handler_tag_index")
  @@index([lastKnownLocation, tag], map: "assets_last_known_location_tag_index")
  @@index([name, tag], map: "assets_name_tag_index")
  @@index([tag], map: "assets_tag_index")
  @@map("assets")
}

model AuditLog {
  id               Int      @id(map: "audit_logs_pk") @default(autoincrement())
  message          String?   @db.VarChar(300)
  userId           Int?     @map("user")
  timestamp        DateTime @default(now()) @db.Timestamp(6)
  subject          String?  @map("subject") @db.VarChar(50)
  identifier       Int?
  prevValue        Json?    @map("prev_value") @db.Json
  user             User?    @relation(fields: [userId], references: [id], onDelete: Restrict, map: "audit_logs_users_id_fk")

  @@index([subject], map: "audit_logs_mtable_mf_mtype_index")
  @@index([timestamp], map: "audit_logs_timestamp_index")
  @@map("audit_logs")
}

model BlogPost {
  id                Int      @id(map: "blog_pk") @default(autoincrement())
  postedAt          DateTime @default(now()) @map("posted_at") @db.Timestamp(6)
  content           String
  authorId          Int      @map("author")
  authorDisplayName String?  @map("author_display_name") @db.VarChar(100)
  title             String   @db.VarChar(150)
  author            Person   @relation(fields: [authorId], references: [id], map: "blog_people_id_fk")

  @@index([authorId, postedAt], map: "blog_author_posted_at_index")
  @@index([postedAt], map: "blog_posted_at_index")
  @@index([title], map: "blog_title_index")
  @@map("blog_posts")
}

model Category {
  id          Int          @id(map: "categories_pk") @default(autoincrement())
  name        String?      @db.VarChar(50)
  priority    Int          @default(0)
  parentId    Int?         @map("parent")
  parent      Category?    @relation("CategoryToCategory_parentId", fields: [parentId], references: [id], onDelete: Restrict, map: "categories_categories_id_fk")
  children    Category[]   @relation("CategoryToCategory_parentId")
  productions Production[]

  @@index([priority, name], map: "categories_priority_name_index")
  @@map("categories")
}

model ContactSubmission {
  id             Int                         @id(map: "contact_submissions_pk") @unique(map: "contact_submissions_id_uindex") @default(autoincrement())
  email          String                      @db.VarChar(300)
  name           String                      @db.VarChar(100)
  timestamp      DateTime                    @default(now()) @db.Timestamp(6)
  resolved       Boolean                     @default(false)
  additionalData Json?                       @map("additional_data") @db.Json
  assignees      ContactSubmissionAssignee[]

  @@index([email, timestamp], map: "contact_submissions_email_timestamp_index")
  @@index([timestamp], map: "contact_submissions_timestamp_index")
  @@map("contact_submissions")
}

model ContactSubmissionAssignee {
  submissionId Int               @map("submission")
  userId       Int               @map("user")
  timestamp    DateTime          @default(now()) @db.Timestamp(6)
  id           Int               @id(map: "contact_submission_assignees_pk") @default(autoincrement())
  submission   ContactSubmission @relation(fields: [submissionId], references: [id], map: "contact_submission_assignees_contact_submissions_id_fk")
  user         User              @relation(fields: [userId], references: [id], map: "contact_submission_assignees_users_id_fk")

  @@unique([userId, submissionId], map: "contact_submission_assignees_pk_2")
  @@index([userId], map: "contact_submission_assignees_user_index")
  @@map("contact_submission_assignees")
}

model Credit {
  productionId Int        @map("production")
  personId     Int        @map("person")
  title        String?    @db.VarChar(100)
  priority     Int        @default(0)
  id           Int        @id(map: "credits_pk") @default(autoincrement())
  person       Person     @relation(fields: [personId], references: [id], map: "credits_people_id_fk")
  production   Production @relation(fields: [productionId], references: [id], map: "credits_productions_id_fk")

  @@unique([productionId, personId], map: "credits_pk_2")
  @@index([personId, productionId], map: "credits_person_production_index")
  @@index([productionId, priority, title], map: "credits_production_priority_title_index")
  @@map("credits")
}

model Group {
  id                Int              @id(map: "groups_pk") @default(autoincrement())
  name              String           @db.VarChar(50)
  parentId          Int?             @map("parent")
  priority          Int              @default(0)
  parent            Group?           @relation("GroupToGroup_parentId", fields: [parentId], references: [id], onDelete: Restrict, map: "groups_groups_id_fk")
  permissions       GroupPermission[] @relation("group_permissionsTogroups")
  children          Group[]          @relation("GroupToGroup_parentId")
  users             UserGroup[]      @relation("groupsTouser_groups")

  @@index([name], map: "groups_name_index")
  @@index([priority, name, id], map: "groups_priority_name_id_index")
  @@map("groups")
}

model GroupPermission {
  id         Int      @id(map: "group_permissions_pk") @default(autoincrement())
  groupId    Int      @map("group")
  action     String   @db.VarChar(100)
  subject    String[] @db.VarChar(300)
  fields     String[] @db.VarChar(100)
  conditions Json?    @db.Json
  inverted   Boolean  @default(false)
  reason     String?  @db.VarChar(300)
  group     Group    @relation("group_permissionsTogroups", fields: [groupId], references: [id], map: "group_permissions_groups_id_fk")

  @@index([groupId, subject, action], map: "group_permissions_group_subject_action_index")
  @@map("group_permissions")
}

model Image {
  id           Int               @id(map: "images_pk") @unique(map: "images_id_uindex") @default(autoincrement())
  name         String            @db.VarChar(50)
  description  String?           @db.VarChar(200)
  path         String            @db.VarChar(1000)
  people       PersonImage[]
  imageFor     ProductionImage[]
  thumbnailFor Production[]

  @@map("images")
}

model Person {
  id          Int           @id(map: "people_pk") @unique(map: "people_id_uindex") @default(autoincrement())
  name        String        @db.VarChar(100)
  pronouns    String?       @db.VarChar(20)
  graduation  DateTime?     @db.Date
  start       DateTime      @db.Date
  end         DateTime?     @db.Date
  description String?
  blogPosts   BlogPost[]
  credits     Credit[]
  images      PersonImage[]
  roles       Role[]
  users       User[]

  @@map("people")
}

model PersonImage {
  imageId  Int    @map("image")
  personId Int    @map("person")
  priority Int    @default(0)
  id       Int    @id(map: "people_images_pk") @default(autoincrement())
  image    Image  @relation(fields: [imageId], references: [id], map: "people_images_images_id_fk")
  person   Person @relation(fields: [personId], references: [id], map: "people_images_people_id_fk")

  @@unique([imageId, personId], map: "people_images_pk_2")
  @@index([personId], map: "people_images_person_index")
  @@map("people_images")
}

model Production {
  id             Int               @id(map: "productions_pk") @default(autoincrement())
  name           String            @db.VarChar(100)
  description    String?
  startTime      DateTime?         @map("start_time") @db.Timestamp(6)
  endTime        DateTime?         @map("end_time") @db.Timestamp(6)
  isLive         Boolean           @default(true) @map("is_live")
  categoryId     Int?              @map("category")
  closetLocation String?           @map("closet_location") @db.VarChar(100)
  eventLocation  String?           @map("event_location") @db.VarChar(100)
  teamNotes      String?           @map("team_notes")
  discordServer  String?           @map("discord_server") @db.Char(18)
  discordChannel String?           @map("discord_channel") @db.Char(18)
  thumbnailId    Int?              @map("thumbnail")
  closetTime     DateTime?         @map("closet_time") @db.Timestamp(6)
  category       Category?         @relation(fields: [categoryId], references: [id], onDelete: Restrict, map: "productions_categories_id_fk")
  thumbnail      Image?            @relation(fields: [thumbnailId], references: [id], onDelete: Restrict, map: "productions_images_id_fk")
  credits        Credit[]
  images         ProductionImage[] @relation("production_imagesToproductions")
  rsvps          ProductionRSVP[]
  tags           ProductionTag[]
  videos         ProductionVideo[]

  @@index([categoryId, startTime, name], map: "productions_category_start_time_name_index")
  @@index([isLive, startTime], map: "productions_is_live_start_time_index")
  @@index([name], map: "productions_name_index")
  @@index([startTime, name], map: "productions_start_time_name_index")
  @@map("productions")
}

model ProductionImage {
  productionId Int        @map("production")
  imageId      Int        @map("image")
  priority     Int        @default(0)
  id           Int        @id(map: "production_images_pk") @default(autoincrement())
  image        Image      @relation(fields: [imageId], references: [id], map: "production_images_images_id_fk")
  production   Production @relation("production_imagesToproductions", fields: [productionId], references: [id], map: "production_images_productions_id_fk")

  @@unique([productionId, imageId], map: "production_images_pk_2")
  @@index([productionId, priority], map: "production_images_production_priority_index")
  @@map("production_images")
}

model ProductionRSVP {
  productionId Int        @map("production")
  userId       Int        @map("user")
  willAttend   String?    @map("will_attend") @db.VarChar(5)
  notes        String?
  id           Int        @id(map: "production_rsvps_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_rsvps_productions_id_fk")
  user         User       @relation(fields: [userId], references: [id], map: "production_rsvps_users_id_fk")

  @@unique([productionId, userId], map: "production_rsvps_pk_2")
  @@index([userId, willAttend], map: "production_rsvps_user_will_attend_index")
  @@map("production_rsvps")
}

model ProductionTag {
  productionId Int        @map("production")
  tag          String     @db.VarChar(50)
  id           Int        @id(map: "production_tags_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_tags_productions_id_fk")

  @@unique([productionId, tag], map: "production_tags_pk_2")
  @@index([tag], map: "production_tags_tag_index")
  @@map("production_tags")
}

model ProductionVideo {
  productionId Int        @map("production")
  videoId      Int        @map("video")
  priority     Int        @default(0)
  id           Int        @id(map: "production_videos_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_videos_productions_id_fk")
  video        Video      @relation(fields: [videoId], references: [id], map: "production_videos_videos_id_fk")

  @@unique([productionId, videoId], map: "production_videos_pk_2")
  @@index([productionId, priority], map: "production_videos_production_priority_index")
  @@map("production_videos")
}

model Redirect {
  key      String    @unique(map: "redirects_pk_2") @db.VarChar(100)
  location String    @db.VarChar(3000)
  expires  DateTime? @db.Timestamp(6)
  id       Int       @id(map: "redirects_pk") @default(autoincrement())

  @@index([expires], map: "redirects_expires_index")
  @@map("redirects")
}

model Role {
  id        Int       @id(map: "roles_pk") @default(autoincrement())
  personId  Int       @map("person")
  name      String    @db.VarChar(100)
  startTime DateTime  @default(now()) @map("start_time") @db.Timestamp(6)
  endTime   DateTime? @map("end_time") @db.Timestamp(6)
  priority  Int       @default(0)
  person    Person    @relation(fields: [personId], references: [id], map: "roles_people_id_fk")

  @@index([personId, priority, startTime], map: "roles_person_priority_start_time_index")
  @@map("roles")
}

model User {
  id                         Int                         @id(map: "users_pk") @default(autoincrement())
  username                   String                      @unique(map: "users_username_uindex") @db.VarChar(8)
  mail                       String                      @unique(map: "users_mail_uindex") @db.VarChar(300)
  personId                   Int?                        @map("person")
  discord                    String?                     @unique(map: "users_discord_uindex") @db.Char(18)
  password                   String?                     @db.VarChar(300)
  joined                     DateTime                    @default(now()) @db.Timestamp(6)
  person                     Person?                     @relation(fields: [personId], references: [id], onDelete: Restrict, map: "users_people_id_fk")
  accessLogs                 AccessLog[]
  checkedOutAssets           Asset[]                     @relation("assetsTousers")
  auditLogs                  AuditLog[]
  assignedContactSubmissions ContactSubmissionAssignee[]
  productionRsvps            ProductionRSVP[]
  groups                     UserGroup[]                 @relation("user_groupsTousers")
  permissions                UserPermission[]            @relation("user_permissionsTousers")
  voteResponses              VoteResponse[]

  @@map("users")
}

model UserGroup {
  id      Int   @id(map: "user_groups_pk") @default(autoincrement())
  userId  Int   @map("user")
  groupId Int   @map("group")
  group   Group @relation("groupsTouser_groups", fields: [groupId], references: [id], map: "user_groups_groups_id_fk")
  user    User  @relation("user_groupsTousers", fields: [userId], references: [id], map: "user_groups_users_id_fk")

  @@unique([userId, groupId], map: "user_groups_pk_2")
  @@map("user_groups")
}

model UserPermission {
  id         Int      @id(map: "user_permissions_pk") @default(autoincrement())
  userId     Int      @map("user")
  action     String   @db.VarChar(100)
  subject    String[] @db.VarChar(300)
  fields     String[] @db.VarChar(100)
  conditions Json?    @db.Json
  inverted   Boolean  @default(false)
  reason     String?  @db.VarChar(300)
  user       User     @relation("user_permissionsTousers", fields: [userId], references: [id], map: "user_permissions_users_id_fk")

  @@index([userId, subject, action], map: "user_permissions_user_subject_action_index")
  @@map("user_permissions")
}

model Video {
  id       Int               @id(map: "videos_pk") @default(autoincrement())
  name     String            @db.VarChar(100)
  format   String            @db.VarChar(32)
  metadata Json?             @db.Json
  videoFor ProductionVideo[]

  @@map("videos")
}

model Vote {
  id          Int            @id(map: "votes_pk")
  question    String         @db.VarChar(200)
  options     String[]       @db.VarChar(200)
  expires     DateTime?      @db.Timestamp(6)
  description String?
  responses   VoteResponse[]

  @@index([expires], map: "votes_expires_index")
  @@map("votes")
}

model VoteResponse {
  voteId    Int      @map("vote")
  userId    Int      @map("user")
  timestamp DateTime @default(now()) @db.Timestamp(6)
  id        Int      @id(map: "vote_responses_pk") @default(autoincrement())
  selection String   @db.VarChar(200)
  user      User     @relation(fields: [userId], references: [id], map: "vote_responses_users_id_fk")
  vote      Vote     @relation(fields: [voteId], references: [id], map: "vote_responses_votes_id_fk")

  @@unique([voteId, userId], map: "vote_responses_pk_2")
  @@index([userId], map: "vote_responses_user_index")
  @@map("vote_responses")
}
