scalar DateTime
scalar JSON
scalar Upload

directive @auth(subject: String) on FIELD_DEFINITION

"""
Input type used for pagination in multi-document searches. Offset-based OR cursor-based pagination can be
used, or both. This is fed to Prisma. https://www.prisma.io/docs/concepts/components/prisma-client/pagination
"""
input Pagination {
    skip: Int
    take: Int!
    cursor: ID
}

type Query {
    """
    Get a list of users which the user currently has access to read.
    """
    users(pagination: Pagination): [User!]! @auth(subject: "User")
}

#type Mutation {
#
#}

# Basic types #

type AccessLog {
    id: ID!
    user: User
    service: String
    timestamp: DateTime
    ip: String
}

type AlertLog {
    id: ID!
    message: String
    severity: String
    timestamp: DateTime
}

type AuditLog {
    id: ID!
    user: User
    timestamp: DateTime
    modificationType: String
    modifiedTable: String
    modifiedField: String
    previousValue: String
    comment: String
    metadata: JSON
}

type BlogPost {
    id: ID!
    postedAt: DateTime
    content: String
    author: Person
    authorDisplayName: String
    title: String
}

type Category {
    id: ID!
    name: String
    priority: Int
    parent: Category
    productions: [Production!]
}

type ContactSubmissionAssignee {
    id: ID!
    submission: ContactSubmission
    user: User
    timestamp: DateTime
}

type ContactSubmission {
    id: ID!
    email: String
    name: String
    timestamp: DateTime
    resolved: Boolean
    additionalData: JSON
    assignees: [ContactSubmissionAssignee!]
}

type Credit {
    id: ID!
    production: Production
    person: Person
    title: String
    priority: Int
}

type GroupPermission {
    id: ID!
    group: Group
    action: String
    subject: [String!]
    fields: [String!]
    conditions: JSON
    inverted: Boolean
    reason: String
}

type Group {
    id: ID!
    name: String
    parent: Group
    priority: Int
    permissions: [GroupPermission!]
    children: [Group!]
    users: [UserGroup!]
}

type Image {
    id: ID!
    name: String
    description: String
    path: String
    people: [PersonImage!]
    imageFor: [ProductionImage!]
    thumbnailFor: [Production!]
}

type Person {
    id: ID!
    name: String
    pronouns: String
    graduation: DateTime
    start: DateTime
    end: DateTime
    description: String
    images: [PersonImage!]
    blogPosts: [BlogPost!]
    credits: [Credit!]
    roles: [Role!]
    users: [User!]
}

type PersonImage {
    id: ID!
    image: Image
    person: Person
    priority: Int
}

type ProductionImage {
    id: ID!
    production: Production
    image: Image
    priority: Int
}

type ProductionRSVP {
    id: ID!
    production: Production
    user: User
    willAttend: Boolean
    notes: String
}

type ProductionTag {
    id: ID!
    production: Production
    tag: String
}

type ProductionVideo {
    id: ID!
    production: Production
    video: Video
    priority: Int
}

type Production {
    id: ID!
    name: String
    description: String
    startTime: DateTime
    endTime: DateTime
    isLive: Boolean
    category: Category
    closetLocation: String
    eventLocation: String
    teamNotes: String
    discordServer: String
    discordChannel: String
    thumbnail: Image
    closetTime: DateTime
    images: [ProductionImage!]
    rsvps: [ProductionRSVP!]
    tags: [ProductionTag!]
    videos: [ProductionVideo!]
}

type Redirect {
    id: ID!
    key: String
    location: String
    expires: DateTime
}

type Role {
    id: ID!
    person: Person
    name: String
    startTime: DateTime
    endTime: DateTime
    priority: Int
}

type UserGroup {
    id: ID!
    user: User
    group: Group
}

type UserPermission {
    id: ID!
    user: User
    action: String
    subject: [String!]
    fields: [String!]
    conditions: JSON
    inverted: Boolean
    reason: String
}

type User {
    id: ID! @auth(subject: "User")
    username: String @auth(subject: "User")
    mail: String @auth(subject: "User")
    person: Person @auth(subject: "User")
    discord: String
    joined: DateTime
    permissions: [UserPermission!]
    groups: [UserGroup!]
    accessLogs: [AccessLog!]
    auditLogs: [AuditLog!]
    assignedContactSubmissions: [ContactSubmissionAssignee!]
    productionRsvps: [ProductionRSVP!]
    voteResponses: [VoteResponse!]
}

input UserWriteInput {
    username: String
    mail: String
    person: ID
    discord: String
    password: String
}

type Video {
    id: ID!
    name: String
    format: String
    metadata: JSON
    videoFor: [ProductionVideo!]
}

type VoteResponse {
    id: ID!
    vote: Vote
    user: User
    timestamp: DateTime
}

type Vote {
    id: ID!
    question: String
    options: [String!]
    expires: DateTime
    description: String
    responses: [VoteResponse!]
}
